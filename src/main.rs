use gen::State;
use lalrpop_util::lalrpop_mod;
use miette::IntoDiagnostic;
use std::env::args;

pub mod ast;
mod gen;
pub mod parser;

// The lalrpop module, it does generate the parser and lexer
// for the language.
lalrpop_mod! {
    #[allow(warnings)]
    /// The parsing module
    pub rinha
}
/// Strips Byte-Order-Mark (BOM) generated by some programs
fn strip_bom(s: &str) -> &str {
    if s.as_bytes().get(0..3) == Some(&[0xEF, 0xBB, 0xBF]) {
        &s[3..]
    } else {
        s
    }
}

fn app() -> miette::Result<()> {
    let mut args = args().skip(1);
    let src = args.next().expect("I need a filename блыат");
    let file_contents = std::fs::read_to_string(&src).into_diagnostic()?;
    let file = crate::parser::parse_or_report(&src, strip_bom(&file_contents))?;
    let mut state = State::default();

    if let Err(e) = state.generate(file) {
        miette::bail!(e);
    }

    if let Err(e) = state.write() {
        miette::bail!(e);
    }

    return Ok(());
}

fn main() {
    if let Err(e) = app() {
        eprintln!("{e:?}");
    }
}
